import org.jenkinsci.plugins.gitclient.GitClient

def checkout_source (repo_name, branch_name){
    checkout([$class: 'GitSCM', \
          branches: [[name: "${branch_name}"]],
          doGenerateSubmoduleConfigurations: false, \
            extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "${repo_name}"], \
                         [$class: 'CleanBeforeCheckout']], \
            submoduleCfg: [], \
            userRemoteConfigs: [[credentialsId: "${cred_id}", \
                                    url: "git@github.com:swapnilz30/${repo_name}.git"]]])
}

def push_rpm(rpm_path,rpm_noarch_path,master_build_number,repo_path){
   sh "sudo cp $rpm_path/*${master_build_number}*.rpm $repo_path"
   sh "sudo cp $rpm_noarch_path/*${master_build_number}*noarch.rpm $repo_path"
   sh "sudo createrepo --update $repo_path"
   sh "sudo chown -R root:apache $repo_path"
}
node ('yum-repo-slave') {

    cred_id='UnZGVkW9C8hyuvS#!@d!oLdJ5PDYaCRL#YYfaMf$#9&zn4'
    workspace = pwd()
    src = "$workspace"
    master_build_number = "${env.BUILD_NUMBER}"
    stage ('xen-server-commands') {
       branch_name = 'develop'
       repo_name = 'xen-server-commands'
       checkout_source("${repo_name}","${branch_name}")
       dir("${repo_name}"){
         sh "sh -x build.sh -b ${master_build_number}"
       }
    }
    stage ('print_msg') {
       branch_name = 'develop'
       repo_name = 'rpm-build'
       checkout_source("${repo_name}","${branch_name}")
       dir("${repo_name}"){
         sh "sh -x build.sh -b ${master_build_number}"
       }
    }
    stage ('push_rpm') {
      push_rpm("${rpm_path}","${rpm_noarch_path}","${master_build_number}","${repo_path}")
    }
}